name: Deploy Resources (Demo)

on:
  workflow_dispatch:
    inputs:
      action:
        type: choice
        description: 'Action to perform (plan/apply/destroy)'
        options:
          - plan
          - apply
          - destroy
      resource:
        type: choice
        description: 'Resource'
        options:
          - 'common/storage/s3/example-bucket'
          - 'common/networking/azs'
          - 'common/networking/vpc'
      region:
        type: choice
        description: 'AWS Region'
        options:
          - 'eu-west-1'
          - 'us-east-1'

env:
  # tf_version: 'v1.6.6'
  # tg_version: '0.54.7'
  tf_version: 'v1.10.4'
  tg_version: '0.71.2'
  tg_container: 'tf-1.10.3-tg-0.71.1'
  environment: 'demo'
  base_dir: 'non-prod'
  aws_role: 'arn:aws:iam::966412459053:role/CCAwsInfraDemoGithubAction'
  #TF_PLUGIN_CACHE_DIR: ${{ github.workspace }}/.terraform.d/plugin-cache
  #TF_LOG: 'DEBUG'

jobs:
  setup:
    name: Setup Environment
    runs-on: ubuntu-24.04
    permissions:
      id-token: write
      contents: read
    outputs:
      tg_dir: ${{ steps.set-dir.outputs.tg_dir }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.aws_role }}
          aws-region: ${{ github.event.inputs.region }}

      - name: Define Terragrunt Directory
        id: set-dir
        run: echo "tg_dir=${{ env.base_dir }}/${{ github.event.inputs.region }}/${{ env.environment }}/${{ github.event.inputs.resource }}" >> $GITHUB_OUTPUT
  
      - name: Annotate Pipeline
        run: echo "::notice ::Running Terragrunt ${{ github.event.inputs.action }} on Resource --> ${{ env.base_dir }}/${{ github.event.inputs.region }}/${{ env.environment }}/${{ github.event.inputs.resource }}"


  checks:
    name: Validate Terragrunt Configuration
    strategy:
      fail-fast: true
    runs-on: ubuntu-24.04
    container:
      image: ghcr.io/mm-camelcase/docker-terragrunt:tf-1.10.3-tg-0.71.1
    permissions:
      id-token: write
      contents: read
    needs: setup
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.aws_role }}
          aws-region: ${{ github.event.inputs.region }}

      - name: Check HCL Formatting
        run: terragrunt hclfmt --terragrunt-check --terragrunt-diff -terragrunt-working-dir ${{ needs.setup.outputs.tg_dir }}

      - name: Validate Configuration
        run: terragrunt validate -terragrunt-working-dir ${{ needs.setup.outputs.tg_dir }}

  plan:
    name: Generate Plan
    runs-on: ubuntu-24.04
    container:
      image: ghcr.io/mm-camelcase/docker-terragrunt:tf-1.10.3-tg-0.71.1
    permissions:
      id-token: write
      contents: read
    needs: [setup, checks]
    if: ${{ github.event.inputs.action == 'plan' || github.event.inputs.action == 'apply' || github.event.inputs.action == 'destroy' }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.aws_role }}
          aws-region: ${{ github.event.inputs.region }}

      # - name: Run Terragrunt Plan
      #   run: terragrunt plan -terragrunt-working-dir ${{ needs.setup.outputs.tg_dir }} -out=$GITHUB_WORKSPACE/tfplan -no-color 
    
      - name: Run Terraform Plan
        run: |
          if [ "${{ github.event.inputs.action }}" = "plan" ] || [ "${{ github.event.inputs.action }}" = "apply" ]; then
            echo "Running terraform plan..."
            #terragrunt plan -terragrunt-working-dir ${{ needs.setup.outputs.tg_dir }} -out=tfplan -no-color
            terragrunt run-all plan -terragrunt-working-dir ${{ needs.setup.outputs.tg_dir }}  --terragrunt-out-dir ${{ github.workspace }} 
          elif [ "${{ github.event.inputs.action }}" = "destroy" ]; then
            echo "Running terraform plan -destroy..."
            terragrunt plan -destroy -terragrunt-working-dir ${{ needs.setup.outputs.tg_dir }} -out=tfplan -no-color
          fi

      - name: check dir 1
        run: |
          pwd
          ls -la
          echo ${{ github.workspace }} 
          ls -la ${{ github.workspace }} 
          find ${{ needs.setup.outputs.tg_dir }} -name "tfplan.tfplan"

      - name: Run Terragrunt Show
        run: terragrunt show -json ${{ github.workspace }}/tfplan.tfplan  -terragrunt-working-dir ${{ needs.setup.outputs.tg_dir }} > plan-output.json

      - name: Visualise plan
        run: |
          tfplandoc generate -h | sed -n '/Key:/,/Usage:/p' | head -n -1 > plan.md
          tfplandoc generate plan-output.json >> plan.md

      # - name: check dir 2
      #   run: |
      #     pwd
      #     ls -la
      #     ls -la ${{ needs.setup.outputs.tg_dir }}
      #     cat ${{ needs.setup.outputs.tg_dir }}/.terragrunt-cache/*/*/tfplan


      - name: Find tfplan and copy to root
        run: |
          TFPLAN_PATH=$(find ${{ needs.setup.outputs.tg_dir }} -name "tfplan")
          #cp $TFPLAN_PATH ./tfplan
          cp ${{ github.workspace }}/tfplan.tfplan ./tfplan.tfplan
          #echo $TFPLAN_PATH
          #echo "TFPLAN_PATH=$TFPLAN_PATH" >> $GITHUB_ENV

      # - name: Copy tfplan to Workspace Root
      #   run: cp ${{ env.TFPLAN_PATH }} ./tfplan

      # Upload the plan file and visual planas as artifacts
      - name: Upload Terraform Plan Output
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan-output
          path: |
            ./plan.md
            #./tfplan
            ./tfplan.tfplan



  # approval:
  #   needs: plan
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Await Manual Approval
  #       uses: hmarr/auto-approve-action@v4
  #       # with:
  #       #   github_token: ${{ secrets.GITHUB_TOKEN }}

  # approval:
  #   needs: plan
  #   runs-on: ubuntu-latest
  #   if: ${{ github.event.inputs.action == 'apply' || github.event.inputs.action == 'destroy' }}
  #   steps:
  #     - name: Await Manual Approval
  #       uses: hmarr/auto-approve-action@v2
  #       # with:
  #       #   github_token: ${{ secrets.GITHUB_TOKEN }}

  approval:
    needs: plan
    runs-on: ubuntu-latest
    environment:
      name: demo
    steps:
      - name: Await Manual Approval
        run: echo "Waiting for manual approval before applying changes."


  apply:
    name: Apply Changes
    runs-on: ubuntu-24.04
    container:
      image: devopsinfra/docker-terragrunt:tf-1.10.3-tg-0.71.1
    permissions:
      id-token: write
      contents: read
    needs: [approval, setup, plan]
    if: ${{ github.event.inputs.action == 'apply' }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.aws_role }}
          aws-region: ${{ github.event.inputs.region }}

      # - name: Run Terragrunt Apply
      #   uses: gruntwork-io/terragrunt-action@v2.1.4
      #   with:
      #     tf_version: ${{ env.tf_version }}
      #     tg_version: ${{ env.tg_version }}
      #     tg_dir: ${{ needs.setup.outputs.tg_dir }}
      #     #tg_command: 'run-all apply'
      #     tg_command: 'run-all apply'
      #     #tg_comment: 1
      #     #tg_add_approve: 0

      # - name: Run Terragrunt JSON
      #   run: terragrunt render-json -terragrunt-working-dir ${{ needs.setup.outputs.tg_dir }} --terragrunt-json-out /dev/stdout

      # - name: Run Terragrunt Plan
      #   run: terragrunt run-all apply -terragrunt-working-dir ${{ needs.setup.outputs.tg_dir }} --terragrunt-non-interactive --terragrunt-json-out testout.json

      # - name: Run Terragrunt Apply
      #   run: terragrunt run-all apply -terragrunt-working-dir ${{ needs.setup.outputs.tg_dir }} --terragrunt-non-interactive --terragrunt-plan-all

      # - name: Run Terragrunt Apply
      #   run: terragrunt apply tfplan

      - name: check dir 1
        run: |
          pwd
          ls -la

      - uses: actions/download-artifact@v4
        with:
          name: terraform-plan-output
          path: ${{ runner.temp }}/tfplan.tfplan

      - name: check dir 2
        run: |
          pwd
          ls -la
          echo ${{ github.workspace }} 
          echo ${{ runner.temp }}
          ls -la ${{ runner.temp }}

      - name: Run Terrafrom Apply 2
        #run: terragrunt apply ${{ github.workspace }}/tfplan -terragrunt-working-dir ${{ needs.setup.outputs.tg_dir }} 
        run: terragrunt run-all apply -terragrunt-working-dir ${{ needs.setup.outputs.tg_dir }}  --terragrunt-out-dir ${{ runner.temp }} --terragrunt-non-interactive

      # - name: Annotate Apply
      #   run: |
      #     ls -la

      # - name: Annotate Apply
      #   run: |
      #     echo "::notice ::Applied Stack: ${{ needs.setup.outputs.tg_dir }}"

  destroy:
    name: Destroy Resources
    runs-on: ubuntu-24.04
    permissions:
      id-token: write
      contents: read
    needs: [approval, setup, plan]
    if: ${{ github.event.inputs.action == 'destroy' }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.aws_role }}
          aws-region: ${{ github.event.inputs.region }}

      - name: Run Terragrunt Destroy
        uses: gruntwork-io/terragrunt-action@v2
        with:
          tf_version: ${{ env.tf_version }}
          tg_version: ${{ env.tg_version }}
          tg_dir: ${{ needs.setup.outputs.tg_dir }}
          tg_command: 'run-all destroy -auto-approve'

      - name: Annotate Destroy
        run: |
          echo "::notice ::Destroyed Stack: ${{ needs.setup.outputs.tg_dir }}"
