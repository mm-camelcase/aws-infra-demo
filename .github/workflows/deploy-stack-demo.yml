name: Deploy Stack (Enhanced Demo)

on:
  workflow_dispatch:
    inputs:
      action:
        type: choice
        description: 'Action to perform (plan/apply/destroy)'
        options:
          - plan
          - apply
          - destroy
      stack:
        type: choice
        description: 'Stack to target'
        options:
          - 'common/networking'
      region:
        type: choice
        description: 'AWS Region'
        options:
          - 'eu-west-1'
          - 'us-east-1'

env:
  # tf_version: 'v1.6.6'
  # tg_version: '0.54.7'
  tf_version: 'v1.10.4'
  tg_version: '0.71.2'
  environment: 'demo'
  base_dir: 'non-prod'
  aws_role: 'arn:aws:iam::966412459053:role/CCAwsInfraDemoGithubAction'
  #TF_PLUGIN_CACHE_DIR: ${{ github.workspace }}/.terraform.d/plugin-cache
  #TF_LOG: 'DEBUG'

jobs:
  setup:
    name: Setup Environment
    runs-on: ubuntu-24.04
    permissions:
      id-token: write
      contents: read
    outputs:
      tg_dir: ${{ steps.set-dir.outputs.tg_dir }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.aws_role }}
          aws-region: ${{ github.event.inputs.region }}

      # - name: Create Terraform Plugin Cache Dir
      #   run: mkdir -p $TF_PLUGIN_CACHE_DIR

      # - name: Terraform Plugin Cache
      #   uses: actions/cache@v4
      #   with:
      #     path: ${{ env.TF_PLUGIN_CACHE_DIR }}
      #     key: ${{ runner.os }}-terraform-plugin-cache-${{ hashFiles('**/.terraform.lock.hcl') }}

      - name: Setup Terragrunt
        uses: autero1/action-terragrunt@v3
        with:
          terragrunt-version: ${{ env.tg_version }}
          # token: ${{ secrets.GITHUB_TOKEN }}

      - name: Define Terragrunt Directory
        id: set-dir
        run: echo "tg_dir=${{ env.base_dir }}/${{ github.event.inputs.region }}/${{ env.environment }}/${{ github.event.inputs.stack }}" >> $GITHUB_OUTPUT
  
  checks:
    name: Validate Terragrunt Configuration
    runs-on: ubuntu-24.04
    permissions:
      id-token: write
      contents: read
    needs: setup
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.aws_role }}
          aws-region: ${{ github.event.inputs.region }}

      - name: Interact with Terragrunt
        run: terragrunt --version

      - name: Check HCL Formatting
        uses: gruntwork-io/terragrunt-action@v2
        env:
          TF_PLUGIN_CACHE_DIR: /github/workspace/.terraform.d/plugin-cache
        with:
          tf_version: ${{ env.tf_version }}
          tg_version: ${{ env.tg_version }}
          tg_dir: ${{ needs.setup.outputs.tg_dir }}
          tg_command: 'hclfmt --terragrunt-check --terragrunt-diff'

      - name: Validate Configuration
        uses: gruntwork-io/terragrunt-action@v2
        env:
          TF_PLUGIN_CACHE_DIR: /github/workspace/.terraform.d/plugin-cache
        with:
          tf_version: ${{ env.tf_version }}
          tg_version: ${{ env.tg_version }}
          tg_dir: ${{ needs.setup.outputs.tg_dir }}
          tg_command: 'validate'

  plan:
    name: Generate Plan
    runs-on: ubuntu-24.04
    permissions:
      id-token: write
      contents: read
    needs: [setup, checks]
    if: ${{ github.event.inputs.action == 'plan' }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.aws_role }}
          aws-region: ${{ github.event.inputs.region }}

      - name: Run Terragrunt Plan
        uses: gruntwork-io/terragrunt-action@v2
        id: plan
        with:
          tf_version: ${{ env.tf_version }}
          tg_version: ${{ env.tg_version }}
          tg_dir: ${{ needs.setup.outputs.tg_dir }}
          tg_command: 'run-all plan'
          tg_comment: 1
          tg_add_approve: 0
        # env:
        #   TF_PLUGIN_CACHE_DIR: /github/workspace/.terraform.d/plugin-cache

      # - name: List Plan Files
      #   run: |
      #     echo "Checking for plan.tfplan files..."
      #     find . -name "plan.tfplan" -type f -exec ls -lh {} +

      # - name: Log Terragrunt Plan Output
      #   run: |
      #     echo "Terragrunt Plan Output: ${{ steps.plan.outputs.tg_action_output }}"

      # - name: Output Cleaning
      #   if: always()
      #   run: |
      #     TG_OUT=$(echo "${{ steps.plan.outputs.tg_action_output }}" | sed 's|%0A|\n|g')
      #     echo "TG_PLAN_OUTPUT<<EOF" >> $GITHUB_ENV
      #     echo "$TG_OUT" >> $GITHUB_ENV
      #     echo "EOF" >> $GITHUB_ENV

      # - name: Log Cleaned Plan Output
      #   run: |
      #     echo "Cleaned Terragrunt Plan Output:"
      #     echo "${{ env.TG_PLAN_OUTPUT }}"

      # - name: Log Terragrunt Plan Output
      #   run: |
      #     echo "Terragrunt Plan Output: ${{ steps.plan.outputs.tg_action_output }}"

      # - name: Save Plan Output to File
      #   run: |
      #     cat <<EOF > terragrunt_plan_output.txt
      #     ${{ steps.plan.outputs.tg_action_output }}
      #     EOF

      # # - name: Annotate Plan
      # #   if: ${{ success() }}
      # #   run: |
      # #     echo "::notice ::Plan Output for Stack: ${{ needs.setup.outputs.tg_dir }}"

      # - name: Upload Plan Output
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: terraform-plan
      #     path: terragrunt_plan_output.txt

  apply:
    name: Apply Changes
    runs-on: ubuntu-24.04
    permissions:
      id-token: write
      contents: read
    needs: [setup, checks]
    if: ${{ github.event.inputs.action == 'apply' }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.aws_role }}
          aws-region: ${{ github.event.inputs.region }}

      - name: Run Terragrunt Apply
        uses: gruntwork-io/terragrunt-action@v2.1.4
        with:
          tf_version: ${{ env.tf_version }}
          tg_version: ${{ env.tg_version }}
          tg_dir: ${{ needs.setup.outputs.tg_dir }}
          #tg_command: 'run-all apply'
          tg_command: 'run-all apply'
          #tg_comment: 1
          #tg_add_approve: 0

      - name: Annotate Apply
        run: |
          echo "::notice ::Applied Stack: ${{ needs.setup.outputs.tg_dir }}"

  destroy:
    name: Destroy Resources
    runs-on: ubuntu-24.04
    permissions:
      id-token: write
      contents: read
    needs: [setup, checks]
    if: ${{ github.event.inputs.action == 'destroy' }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.aws_role }}
          aws-region: ${{ github.event.inputs.region }}

      - name: Run Terragrunt Destroy
        uses: gruntwork-io/terragrunt-action@v2
        with:
          tf_version: ${{ env.tf_version }}
          tg_version: ${{ env.tg_version }}
          tg_dir: ${{ needs.setup.outputs.tg_dir }}
          tg_command: 'run-all destroy -auto-approve'

      - name: Annotate Destroy
        run: |
          echo "::notice ::Destroyed Stack: ${{ needs.setup.outputs.tg_dir }}"
